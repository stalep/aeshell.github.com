---
layout: docs
title: Editing
index: 7
---

h1. Editing

<br/>

Similar to the GNU Readline library Æsh provides functions that allow users to edit command lines as they are typed in. Æsh har two different editing modes, Emacs and Vi. As with GNU Readline Emacs mode is default.
Features in Æsh includes functions to maintain a list of previously-entered command lines, to recall and perhaps reedit those lines, and perform csh-like history expansion on previous commands.
<br/>

h3. Introduction to Line Editing

<p/>

Often during an interactive session you type in a long line of text, only to notice that the first word on the line is misspelled. Æsh gives you a set of commands for manipulating the text as you type it in, allowing you to just fix your typo, and not forcing you to retype the majority of the line. Using these editing commands, you move the cursor to the place that needs correction, and delete or insert the text of the corrections. Then, when you are satisfied with the line, you simply press <kbd>RET</kbd>. You do not have to be at the end of the line to press <kbd>RET</kbd>; the entire line is accepted regardless of the location of the cursor within the line.

To describe the notation used to represent keystrokes, the text <kbd>C-k</kbd> is read as 'Control-K' describes the character produced when the <kbd>k</kbd> key is pressed while the Control key is depressed. The text <kbd>M-k</kbd> is read as 'Meta-K' and describes the character produced when the Meta key (if you have one) is pressed, and the <kbd>k</kbd> key is pressed. The Meta key is labeled <kbd>ALT</kbd> on many keyboards.
<br/>

h3. Essentials

<p/>

In order to enter characters into the line, simply type them. The typed character appears where the cursor was, and then the cursor moves one space to the right. If you mistype a character, you can use your erase character to back up and delete the mistyped character.

Sometimes you may mistype a character, and not notice the error until you have typed several other characters. In that case, you can type <kbd>C-b</kbd> to move the cursor to the left, and then correct your mistake. Afterwards, you can move the cursor to the right with <kbd>C-f</kbd>.

When you add text in the middle of a line, you will notice that characters to the right of the cursor are `pushed over' to make room for the text that you have inserted. Likewise, when you delete text behind the cursor, characters to the right of the cursor are `pulled back' to fill in the blank space created by the removal of the text. A list of the bare essentials for editing the text of an input line follows.
<br/>

h3. Emacs Commands

<p/>
<DL COMPACT>
<DT><kbd>C-b</kbd>
<DD>Move back one character.
<DT><kbd>C-f</kbd>
<DD>Move forward one character.
<DT><kbd>DEL or Backspace</kbd>
<DD>Delete the character to the left of the cursor.
<DT><kbd>C-d</kbd>
<DD>Delete the character underneath the cursor.
<DT><kbd>C-_ or C-x C-u</kbd>
<DD>Undo the last editing command.  You can undo all the way back to an
empty line.
<DT><kbd>C-a</kbd>
<DD>Move to the start of the line.
<DT><kbd>C-e</kbd>
<DD>Move to the end of the line.
<DT><kbd>M-f</kbd>
<DD>Move forward a word, where a word is composed of letters and digits.
<DT><kbd>M-b</kbd>
<DD>Move backward a word.
<DT><kbd>C-l</kbd>
<DD>Clear the screen, reprinting the current line at the top.
<DT><kbd>C-k</kbd>
<DD>Kill the text from the current cursor position to the end of the line.
<DT><kbd>C-w</kbd>
<DD>Kill from the cursor to the previous whitespace.  This is different than <kbd>M-<kbd>DEL</kbd></kbd> because the word boundaries differ.
<DT><kbd>M-d</kbd>
<DD>Kill from the cursor to the end of the current word, or, if between words, to the end of the next word.
Word boundaries are the same as those used by <kbd>M-f</kbd>.
</DL>

h3. Vi Commands

<p/>
Æsh does not have a full set of <kbd>vi</kbd> editing functions, it does contain enough to allow simple editing of the line. Æsh vi mode behaves as specified in the POSIX standard.

When you enter a line in <kbd>vi</kbd> mode, you are already placed in 'insertion' mode, as if you had typed an <kbd>'i'</kbd>.  Pressing <kbd>ESC</kbd> switches you into `command' mode, where you can edit the text of the line with the standard <kbd>vi</kbd> movement keys, move to previous history lines with <kbd>'k'</kbd> and subsequent lines with <kbd>'j'</kbd>, and so forth.

In order to switch interactively between <kbd>emacs</kbd> and <kbd>vi</kbd> editing modes, use the command <kbd>M-C-j</kbd> (bound to emacs-editing-mode when in <kbd>vi</kbd> mode and to vi-editing-mode in <kbd>emacs</kbd> mode). The Readline default is <kbd>emacs</kbd> mode.
<br/>

h3. Searching for Commands in History

<p/>
Æsh provides commands for searching through the command history for lines containing a specified string. There are two search modes:  <EM>incremental</EM> and <EM>non-incremental</EM>.
<P/>

Incremental searches begin before the user has finished typing the search string. As each character of the search string is typed, Æsh displays the next entry from the history matching the string typed so far. An incremental search requires only as many characters as needed to find the desired history entry.
To search backward in the history for a particular string, type <kbd>C-r</kbd>. Typing <kbd>C-s</kbd> searches forward through the history. The characters present in the value of the <kbd>isearch-terminators</kbd> variable are used to 
terminate an incremental search. If that variable has not been assigned a value, the <kbd>ESC</kbd> and <kbd>C-J</kbd> characters will terminate an incremental search. <kbd>C-g</kbd> will abort an incremental search and restore the original line. When the search is terminated, the history entry containing the search string becomes the current line.
<br/>

h3. Æsh Init File

<p/>
Although the Æsh library comes with a set of Emacs-like keybindings installed by default, it is possible to use a different set of keybindings.
Any user can customize programs that use Readline by putting commands in an <kbd>inputrc</kbd> file, conventionally in his home directory. The name of this file is taken from the value of the environment variable <kbd>INPUTRC</kbd>. If that variable is unset, the default is <kbd>~/.inputrc</kbd>.  If that file does not exist or cannot be read, the ultimate default is <kbd>/etc/inputrc</kbd>.

It is also possible to change from the default Emacs-like key binding to use Vi line editing in the init file.
<br/>

h4. Æsh Init File Syntax

<p/>
Æsh only support a simple structure of the GNU Readline init file. The current implementation only support variable settings and key bindings outside of conditional constructs. Blank lines are ignored and lines beginning with a <kbd>#</kbd> are comments. 

h5. Variables

The syntax for setting variables is simple: <kbd>set variable value</kbd>

Current supported variable settings in Æsh:

<dl compact>
<dt><kbd>editing-mode</kbd>
<dd> The editing-mode variable controls which default set of key bindings is used. By default, Readline starts up in Emacs editing mode, where the keystrokes are most similar to Emacs. This variable can be set to either <kbd>emacs</kbd> or <kbd>vi</kbd>.
<dt><kbd>history-size</kbd>
<dd> Set the maximum number of history entries saved in the history list. Max size is the same as the <kbd>java int</kbd> data type (2,147,483,647).
<dt><kbd>bell-style</kbd>
<dd>Controls what happens when Æsh wants to ring the terminal bell. Currently Æsh never wants to ring the bell.
<dt><kbd>disable-completion</kbd>
<dd>If set to <kbd>On</kbd>, Readline will inhibit word completion. Completion characters will be inserted into the line as if they had been mapped to <kbd>self-insert</kbd>. The default is <kbd>off</kbd>.
</dl>

h5. Key Bindings

The syntax for controlling key bindings in the init file is simple. First you need to find the name of the command that you want to change. The following sections contain tables of the command name, the default keybinding, if any, and a short description of what the command does.
Once you know the name of the command, simply place on a line in the init file the name of the key you wish to bind the command to, a colon, and then the name of the command. There can be no space between the key name and the colon -- that will be interpreted as part of the key name. The name of the key can be expressed in different ways, depending on what you find most comfortable.

Changing key bindings will only work in Emacs mode.

- info on keybindings will come...



---
Disclamer: Much of this documentation was taken from the GNU Readline docs. Please read the GNU Readline documentation <a href="http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html#Documentation">here</a> for more info regarding GNU Readline and its options.
