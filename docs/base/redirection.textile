---
layout: docs
title: Redirection
index: 5
---

h1. Redirection

<p/>

Redirection is a function common to most command-line interpreters, including the various Unix shells that can redirect standard streams to user-specified locations.
Redirection in JReadline try to emulate how it works in most Unix shells.

<br/>
  
h3. Redirecting standard input and standard output

<p/>

To execute <kbd>command1</kbd> and place the output in <kbd>file1</kbd>:
@command1 > file1@
This will overwrite any existing data in <kbd>file1</kbd>.
<br/>
To append output to the end of the file, use >>:
@command1 >> file1@
<br/>
Using:
@command1 < file1@
executes <kbd>command1</kbd>, with <kbd>file1</kbd> as the source of input (instead of the keyboard).
<br/>
@command1 < infile > outfile@
combines the two: <kbd>command1</kbd> reads from <kbd>infile</kbd> and writes to <kbd>outfile</kbd>.
<br/>

h3. Piping

<p/>

Programs can be run together such that one program reads the output from another with no need for an explicit intermediate file:
@command1 | command2@
executes <kbd>command1</kbd>, using its output as the input for <kbd>command2</kbd>.
<br/>

h3. How this works in JReadline

<p/>

The current implementation of JReadline solves redirection and piping fairly simple. When the user press 'Enter' the line is parsed and if either redirect or pipe is found the line will be broken down in pieces. 
In this example: @command1 > file1@ JReadline will split the line up so that only <kbd>command1</kbd> is returned in ConsoleOutput.buffer with ConsoleOutput.redirectOrPipe set to true.
The output from <kbd>command1</kbd> will be stored in an internal buffer and when <kbd>Console.read(..)</kbd> is called again @> file1@ will be processed.
The same logic is used when pipeline is used. This differ from several Unix shells that's able to run several commands in parallel. JReadline run the commands in sequence.

