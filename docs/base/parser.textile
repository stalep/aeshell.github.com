---
layout: docs
title: CL Parser
index: 9
---

h1. Command Line Parser

<p/>
Ã†sh provide a simple Command Line Parser that is optional for the developer to make use of. You define the parser either with the use of annotations or by using builder classes.

<br/>

h2. Annotation

<p/>
Probably the easiest way to define a parser is by using annotations. The annotation must be defined at class level and is based from <a href="https://github.com/aeshell/aesh/blob/master/src/main/java/org/jboss/aesh/cl/Parameter.java">Parameter</a>. Within the Parameter class you can define multiple <a href="https://github.com/aeshell/aesh/blob/master/src/main/java/org/jboss/aesh/cl/Option.java">Option's</a>.

<br/>

A simple example:

bc(prettyprint linenums).  @Parameter(name = "testing", usage = "a simple test",
        options = {
                @Option(name = 'f', longName = "foo", description = "enable foo"),
                @Option(name = 'e', longName = "equal", description = "enable equal",
                        hasValue = true, required = true),
                @Option(name = 'D', description = "define properties",
                        hasValue = true, required = true, isProperty = true)
        })
class MyCommand1 {
   ...
   CommandLineParser parser = ParserGenerator.generateParser(MyCommand1.class);

}

Here we define a Parser for a command that has the name "testing" with three defined options. More information regarding how to parse and get the options is explained in the Usage section below.

<br/>

h2. Builder

<p/>

It is also possible to create a parser by using the builder classes. As with annotations there are two classes; <a href="https://github.com/aeshell/aesh/blob/master/src/main/java/org/jboss/aesh/cl/ParserBuilder.java">ParserBuilder</a> and <a href="https://github.com/aeshell/aesh/blob/master/src/main/java/org/jboss/aesh/cl/OptionBuilder.java">OptionBuilder</a>.
A simple example on how they can be used:

bc(prettyprint linenums). public class MyCommand1 {
...
ParserBuilder pb = new ParserBuilder().name("less").usage("less is more");
        pb.addOption(
                new OptionBuilder().description("version").name('V').longName("version")
                        .hasValue(false).required(true).create());
        pb.addOption(
                new OptionBuilder().description("is verbose").name('v').longName("verbose")
                        .hasValue(false).create());
        pb.addOption(
                new OptionBuilder().description("attributes").name('D')
                        .isProperty(true).create());
        pb.addOption(
                new OptionBuilder().description("values").longName("values")
                        .hasMultipleValues(true).create());
...
        CommandLineParser clp = pb.generateParser();>
...
}

How the parser is used is described in the section below.

<br/>

h2. Usage

<p/>

When using annotations you create the parser like:

bc(prettyprint linenums). CommandLineParser parser = ParserGenerator.generateParser(MyCommand1.class);

- and with a builder you use:

bc(prettyprint linenums). CommandLineParser parser = ParserBuilder(....).generateParser();

The <a href="https://github.com/aeshell/aesh/blob/master/src/main/java/org/jboss/aesh/cl/CommandLineParser.java">CommandLineParser</a> object has two tasks. First is to parse a command line and the other is to print out usage info based on the defined parameter and options.

To parse a line simply do:

bc(prettyprint linenums). CommandLine cl = commandLineParser.parse(inputString);

The <a href="https://github.com/aeshell/aesh/blob/master/src/main/java/org/jboss/aesh/cl/CommandLine.java">CommandLine</a> class have many defined methods of checking if specific options where enabled and with what value.

Please note that if any unspecified options are found an IllegalArgumentException will be thrown. Also, if a required option is not found or options specified with a value, but is not given any an IllegalArgumentException will be thrown.

The CommandLine also feature a nice way of printing out a usage text (help info). This text is parsed from the defined parameter/options.

- a better and more complex example will come..
